The Active Networks Simulation gets its inputs as a the number of Nodes
in the network, the number of neighbors for each node, the interarrival
intreval and the Number of LPs. Using the number of nodes and number of
neighbors the application develops a random network to simulate. The
above mentioned inputs are given in a config file -
ActiveNetworks.config. 

The executable can be obtained using the Makefile provided. A few changes
may be required to get the Makefile to work on Linux boxes. The executable
is generated in NET. The object files are put in the obj directory. 

The SimUntil value in main.cc determines the simulation time unit until
which to simulate. Its now set at 50. It can be changed and the system
recompiled as and when nesseccary.

The simulation also requires a procgroup file which specifies the
processors on which the simulation is being run.

This application models the working of an Active network. An active
network can be defined as a packet passing network in which the network
infrastructure is programmable. What this means is that the routers in the
network are capable of executing code. The code/program is part of the
packet. The routers having such an execution capability are called active
nodes and the packet containing the code is called a smart packet.

The active nodes form the simulation object in our application while the
smart packets are modelled as events. A node is also acts as an host in
that it also generates packets to other hosts. The packets are generated
based on the interarrival intreval specified. 

The active node upon reciept of a packet passes it on to the Node OS. The
Node OS validates the packet by calling the ValidatePacket routine. Once
the packet has been validated the Node OS decides which processing
environment the packet must go to. If the required environment exists on
the node then the packet is transferred to that node else the packet is
forwarded or discarded depending on its contents. Once the packet has been
passed to the processing environment, the environment performs the
function requested by the packet and passes it on as required towards its
final destination.

The application will soon be integrated with GT-ITM internet topology
generator to use the heirachial networks generated by GT-ITM. An analysis
framework is also being developed to print out statistical results from
the simulation. The source code files are also documented with easy to
understand coments to help understand their working.

*******************************************************************************
More detailed documentation will soon be provided in the form of a latex
documentation in the doc directory.
*******************************************************************************

