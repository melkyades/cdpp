This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

configure:530: checking for gcc
configure:643: checking whether the C compiler (gcc  ) works
configure:659: gcc -o conftest    conftest.c  1>&5
configure:685: checking whether the C compiler (gcc  ) is a cross-compiler
configure:690: checking whether we are using GNU C
configure:718: checking whether gcc accepts -g
configure:780: checking for a BSD compatible install
configure:833: checking whether make sets ${MAKE}
configure:864: checking for c++
configure:896: checking whether the C++ compiler (c++  ) works
configure:912: c++ -o conftest    conftest.C  1>&5
configure:938: checking whether the C++ compiler (c++  ) is a cross-compiler
configure:943: checking whether we are using GNU C++
configure:971: checking whether c++ accepts -g
configure:1004: checking for gnu make
configure:1030: checking for sqrt in -lm
configure:1077: checking for MPI_Send in -lmpi
configure:1117: checking for expect in -lnsl
configure:1164: checking for accept in -lsocket
configure:1212: checking how to run the C preprocessor
configure:1292: checking for ANSI C header files
configure:1399: checking for limits.h
configure:1399: checking for malloc.h
configure:1399: checking for sys/time.h
configure:1437: checking for working const
configure:1512: checking for inline
configure:1552: checking for size_t
configure:1585: checking whether time.h and sys/time.h may both be included
configure:1623: checking for mpi.h
configure:1661: checking for 8-bit clean memcmp
configure:1699: checking for gettimeofday
configure:1754: checking for builtin bool type in c++ compiler
configure:1774: c++ -c -g -O2  conftest.C 1>&5
configure:1794: checking for old style friends of template classes
configure:1820: c++ -c -g -O2  -DHAS_BOOLEAN conftest.C 1>&5
configure:1813: error: declaration of 'operator<<' as non-function
configure:1813: error: expected ';' before '<' token
configure: failed program was:
#line 1807 "configure"
#include "confdefs.h"

int main() {
}
class ostream;
template <class Something> class SomeClass {
  friend ostream &operator<< <> ( ostream &, SomeClass & );
};
SomeClass<int> *x;
int foo(){ 
; return 0; }
